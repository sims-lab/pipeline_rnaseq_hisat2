"""
===========================
Pipeline template
===========================

.. Replace the documentation below with your own description of the
   pipeline's purpose

Overview
========

This pipeline computes the word frequencies in the configuration
files :file:``config.yml` and :file:`conf.py`.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use cgat pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.
cgatReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.yml` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_@template@.py config

Input files
-----------

None required except the pipeline configuration files.

Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

Pipeline output
===============

.. Describe output files of the pipeline here

Glossary
========

.. glossary::


Code
====

"""

###########
# Imports #
###########

from ruffus import *
import sys
import os
import cgatcore.experiment as E
from cgatcore import pipeline as P

#################
# Configuration #
#################

# Load parameters from config file(s).
# Files are parsed in order; later files override options defined in earlier files.
PARAMS = P.get_parameters(
    ["%s/config.yml" % os.path.splitext(__file__)[0], "../config.yml", "config.yml"]
)

############
# Workflow #
############


@follows(mkdir("fastqc"), mkdir("results"), mkdir("logs/fastqc"))
@transform(
    "data/*.fastq.gz", regex(r".*/(.*).fastq.gz"), r"results/fastqc/\1_fastqc.html"
)
def run_fastqc(infile, outfile):
    """
    Run FastQC on the FASTQ files.
    """
    statement = """
        fastqc 
            -o results/fastqc
            --nogroup
            %(infile)s
            > logs/fastqc/%(outfile)s.log
            2>&1
    """

    P.run(statement, job_condaenv="pipeline-env")


# ---------------------------------------------------
# Generic pipeline tasks
@follows(run_fastqc)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
